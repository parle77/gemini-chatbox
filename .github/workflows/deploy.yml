name: Deploy to GitHub Pages
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Create HTML with embedded secrets
      run: |
        # Create a new index.html with secrets embedded directly
        cat > index.html << 'HTMLEOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Assistant Chatbot</title>
    <style>
        /* Your existing CSS - copy from your current index.html */
        :root {
            --primary-color: #226137;
            --secondary-color: #FCB1A8;
            --third-color: #F26D14;
            --fourth-color: #F6D635;
            --background-color: #FFFFFF;
            --text-color: #333333;
            --light-gray: #f7f8fa;
            --border-gray: #e5e7eb;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif; background: var(--primary-color); height: 100vh; display: flex; justify-content: center; align-items: center; }
        .chat-container { width: 100%; max-width: 480px; height: 90vh; max-height: 700px; background: var(--background-color); border-radius: 20px; box-shadow: 0 20px 60px rgba(34, 97, 55, 0.3); display: flex; flex-direction: column; overflow: hidden; }
        .chat-header { background: var(--primary-color); color: white; padding: 20px; display: flex; align-items: center; justify-content: space-between; position: relative; }
        .chat-header::after { content: ''; position: absolute; bottom: 0; left: 0; right: 0; height: 3px; background: var(--fourth-color); }
        .bot-info { display: flex; align-items: center; gap: 12px; }
        .bot-avatar { width: 40px; height: 40px; border-radius: 50%; background: rgba(255, 255, 255, 0.2); border: 2px solid var(--fourth-color); display: flex; align-items: center; justify-content: center; font-size: 20px; }
        .bot-name { font-size: 18px; font-weight: 600; }
        .bot-status { font-size: 12px; opacity: 0.9; color: var(--fourth-color); }
        .chat-messages { flex: 1; overflow-y: auto; padding: 20px; background: var(--light-gray); }
        .message { margin-bottom: 15px; display: flex; animation: fadeIn 0.3s ease-in; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .message.user { justify-content: flex-end; }
        .message-content { max-width: 70%; padding: 12px 16px; border-radius: 18px; word-wrap: break-word; position: relative; }
        .message.user .message-content { background: var(--primary-color); color: white; border-bottom-right-radius: 4px; box-shadow: 0 2px 8px rgba(34, 97, 55, 0.2); }
        .message.bot .message-content { background: var(--third-color); color: white; border-bottom-left-radius: 4px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); }
        .message-time { font-size: 11px; opacity: 0.6; margin-top: 5px; }
        .typing-indicator { display: none; padding: 15px; background: white; border-radius: 18px; border-bottom-left-radius: 4px; border: 1px solid var(--secondary-color); box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); width: fit-content; margin: 0 20px 10px 20px; }
        .typing-indicator.active { display: block; }
        .typing-dot { display: inline-block; width: 8px; height: 8px; border-radius: 50%; background: var(--third-color); margin: 0 2px; animation: typing 1.4s infinite; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; background: var(--primary-color); }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; background: var(--fourth-color); }
        @keyframes typing { 0%, 60%, 100% { transform: translateY(0); } 30% { transform: translateY(-10px); } }
        .chat-input-container { padding: 20px; background: white; border-top: 2px solid var(--secondary-color); }
        .input-wrapper { display: flex; gap: 10px; }
        .chat-input { flex: 1; padding: 12px 16px; border: 2px solid var(--border-gray); border-radius: 25px; font-size: 15px; outline: none; transition: all 0.3s; color: var(--text-color); }
        .chat-input:focus { border-color: var(--primary-color); box-shadow: 0 0 0 3px rgba(34, 97, 55, 0.1); }
        .send-btn { width: 45px; height: 45px; border-radius: 50%; background: var(--primary-color); border: none; color: white; cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.3s; box-shadow: 0 2px 8px rgba(34, 97, 55, 0.3); }
        .send-btn:hover:not(:disabled) { transform: scale(1.1); background: var(--third-color); box-shadow: 0 4px 12px rgba(34, 97, 55, 0.4); }
        .send-btn:active:not(:disabled) { transform: scale(0.95); }
        .send-btn:disabled { opacity: 0.5; cursor: not-allowed; }
        .error-message { background: #fee; color: #c33; padding: 10px; border-radius: 8px; margin: 10px 20px; font-size: 14px; display: none; border-left: 4px solid var(--third-color); }
        .error-message.active { display: block; }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <div class="bot-info">
                <div class="bot-avatar">ü§ñ</div>
                <div>
                    <div class="bot-name">Ask ELLE</div>
                    <div class="bot-status">‚óè Online</div>
                </div>
            </div>
        </div>

        <div class="chat-messages" id="chatMessages">
            <div class="message bot">
                <div class="message-content">
                    <div>Hello! I'm Elle, your gut health assistant. How can I help you today?</div>
                    <div class="message-time"></div>
                </div>
            </div>
        </div>

        <div class="typing-indicator" id="typingIndicator">
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
        </div>

        <div class="error-message" id="errorMessage"></div>

        <div class="chat-input-container">
            <div class="input-wrapper">
                <input type="text" class="chat-input" id="chatInput" placeholder="Type your message...">
                <button class="send-btn" id="sendBtn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <script>
        // Configuration with real API keys injected by GitHub Actions
        const CONFIG = {
            GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}',
            SUPABASE_URL: '${{ secrets.SUPABASE_URL }}',
            SUPABASE_ANON_KEY: '${{ secrets.SUPABASE_ANON_KEY }}',
            DEFAULT_SYSTEM_PROMPT: 'You are Elle, a specialized gut health assistant for the Gutty app. You help users with digestive health questions, gut microbiome information, probiotic and prebiotic guidance, IBS, IBD, and digestive disorder support, and nutrition for gut health. Always be friendly, supportive, and remind users to consult healthcare professionals for serious issues.',
            BOT_NAME: 'Elle',
            BOT_AVATAR: 'ü§ñ'
        };
        
        console.log('Config loaded:', CONFIG.GEMINI_API_KEY ? 'Yes' : 'No');

        let userId = localStorage.getItem('userId') || generateUserId();
        let sessionId = generateSessionId();
        let systemPrompt = CONFIG.DEFAULT_SYSTEM_PROMPT;
        let chatHistory = [];

        function generateUserId() {
            const id = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('userId', id);
            return id;
        }

        function generateSessionId() {
            return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        }

        function formatTime(date) {
            return new Intl.DateTimeFormat('en-US', {
                hour: 'numeric', minute: 'numeric', hour12: true
            }).format(date);
        }

        function addMessageToUI(message, sender, timestamp = null) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            
            const messageText = document.createElement('div');
            messageText.textContent = message;
            
            const timeDiv = document.createElement('div');
            timeDiv.className = 'message-time';
            timeDiv.textContent = formatTime(timestamp || new Date());
            
            contentDiv.appendChild(messageText);
            contentDiv.appendChild(timeDiv);
            messageDiv.appendChild(contentDiv);
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function toggleTyping(show) {
            const typingIndicator = document.getElementById('typingIndicator');
            if (show) {
                typingIndicator.classList.add('active');
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.scrollTop = chatMessages.scrollHeight;
            } else {
                typingIndicator.classList.remove('active');
            }
        }

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.classList.add('active');
            setTimeout(() => errorDiv.classList.remove('active'), 5000);
        }

        async function callGeminiAPI(userMessage) {
            if (!CONFIG.GEMINI_API_KEY) {
                return "Configuration error: API key not configured.";
            }

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${CONFIG.GEMINI_API_KEY}`;
            
            const messages = chatHistory.length === 0 
                ? [{ role: 'user', parts: [{ text: systemPrompt + '\n\nUser: ' + userMessage }] }]
                : [...chatHistory, { role: 'user', parts: [{ text: userMessage }] }];

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        contents: messages,
                        generationConfig: { temperature: 0.7, topK: 1, topP: 1, maxOutputTokens: 2048 }
                    })
                });

                if (!response.ok) throw new Error(`API request failed: ${response.status}`);

                const data = await response.json();
                
                if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                    const botResponse = data.candidates[0].content.parts[0].text;
                    chatHistory.push(
                        { role: 'user', parts: [{ text: userMessage }] },
                        { role: 'model', parts: [{ text: botResponse }] }
                    );
                    return botResponse;
                } else {
                    throw new Error('Invalid response from API');
                }
            } catch (error) {
                console.error('Gemini API error:', error);
                return "I'm sorry, I encountered an error. Please try again later.";
            }
        }

        async function sendMessage() {
            const input = document.getElementById('chatInput');
            const sendBtn = document.getElementById('sendBtn');
            const message = input.value.trim();
            
            if (!message) return;
            
            input.disabled = true;
            sendBtn.disabled = true;
            
            addMessageToUI(message, 'user');
            input.value = '';
            toggleTyping(true);
            
            try {
                const botResponse = await callGeminiAPI(message);
                toggleTyping(false);
                addMessageToUI(botResponse, 'bot');
            } catch (error) {
                toggleTyping(false);
                showError('Failed to get response. Please try again.');
            } finally {
                input.disabled = false;
                sendBtn.disabled = false;
                input.focus();
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Chatbot initialized');
            
            document.getElementById('chatInput').addEventListener('keypress', handleKeyPress);
            document.getElementById('sendBtn').addEventListener('click', sendMessage);
            
            // Handle Adalo userId parameter
            const urlParams = new URLSearchParams(window.location.search);
            const adaloUserId = urlParams.get('userId');
            if (adaloUserId) {
                userId = adaloUserId;
                localStorage.setItem('userId', userId);
                console.log('Using Adalo userId:', userId);
            }
        });
    </script>
</body>
</html>
HTMLEOF
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
